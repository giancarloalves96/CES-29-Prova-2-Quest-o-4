import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class VulnerabilityTester {

	private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
	
	@Rule
	public ExpectedException expectedEx = ExpectedException.none();

	@Before
	public void setUpStreams() {
	    System.setOut(new PrintStream(outContent));
	    System.setErr(new PrintStream(errContent));
	}

	@After
	public void cleanUpStreams() {
	    System.setOut(null);
	    System.setErr(null);
	}
	
	@Test
	public void testNaoPodeMandarArquivoInexistente(){
		expectedEx.expect(IllegalArgumentException.class);
		expectedEx.expectMessage("Arquivo inexistente!");
		
		String nomeInexistente = "esseArquivoNaoExiste";
		int i = 0;
		File file = new File(nomeInexistente);
		while(file.exists()){
			nomeInexistente="esseArquivoNaoExiste"+i++;
			file = new File(nomeInexistente);
		}
		NotVulnerableClass test = new NotVulnerableClass();
		test.notVulnerableMethod(nomeInexistente);
	}
	
	@Test
	public void testNomeDeArquivoNaoPodeConterCaracteresIlegais(){
		expectedEx.expect(IllegalArgumentException.class);
		expectedEx.expectMessage("Caractere inválido presente. Nome do arquivo só pode conter letras "
				+ "maiúsculas e minúsculas, números, ponto e underline.");
		
		String nomeIlegal = "/etc/";
		NotVulnerableClass test = new NotVulnerableClass();
		test.notVulnerableMethod(nomeIlegal);
	}
	
	@Test
	public void test() {
		InputStream input = new ByteArrayInputStream("R\nW\nteste\nR\nS\n".getBytes());
		NotVulnerableClass n = new NotVulnerableClass(input);
		n.notVulnerableMethod("Teste.txt");
		assertEquals(outContent.toString(), "oi");
	}
	
	@Test
	public void test2() {
		InputStream input = new ByteArrayInputStream("R\nW\nteste\nR\nS\n".getBytes());
		NotVulnerableClass n = new NotVulnerableClass(input);
		n.notVulnerableMethod("Teste.txt");
		assertEquals(outContent.toString(), "oi");
	}
}
